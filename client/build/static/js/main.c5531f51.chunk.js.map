{"version":3,"sources":["components/landing/Register.js","components/landing/Login.js","components/landing/Landing.js","components/dashboard/posts/CreatePost.js","components/dashboard/posts/CreateComment.js","components/dashboard/posts/Post.js","components/dashboard/Feed.js","components/dashboard/Sidebar.js","components/dashboard/Home.js","components/dashboard/profile/UserInfo.js","components/dashboard/profile/Profile.js","components/dashboard/standalone-post/StandalonePost.js","components/dashboard/settings/Settings.js","components/dashboard/notifications/Notifications.js","App.js","index.js"],"names":["Register","setAuth","useState","name","username","email","password","inputs","setInputs","onChange","e","target","value","onSubmitForm","a","preventDefault","body","toLowerCase","fetch","method","headers","JSON","stringify","response","json","parseResponse","token","localStorage","setItem","console","error","message","type","className","id","tabIndex","onSubmit","placeholder","Login","Landing","CreatePost","currentUser_image","getFeedPosts","postText","setPostText","myHeaders","Headers","append","src","alt","CreateComment","post","commentCount","getCommentCount","comment","setComment","post_id","user_image","Post","updatePosts","generatePosts","likeCount","setLikeCount","setCommentCount","retweetCount","setRetweetCount","retweeter","setRetweeter","getLikeCount","rows","count","getRetweetCount","getRetweetUserName","retweet_user_id","user_name","checkIfPostLiked","liked","length","unlikePost","likePost","checkIfPostRetweeted","retweet","unretweetPost","retweetPost","useEffect","post_time","Date","toString","slice","to","post_text","onClick","Feed","currentUser","allPosts","setAllPosts","profileImg","map","i","Sidebar","loggedIn","logout","removeItem","Home","getCurrentUser","UserInfo","profile","followerProfiles","setFollowerProfiles","followingProfiles","setFollowingProfiles","allPostsRetweets","setPostsRetweets","Boolean","followed","setFollowed","getPostsRetweets","date_joined","getFollowerProfiles","getFollowingProfiles","checkIfFollowed","followUnfollow","unfollowUser","followUser","description","Profile","setProfile","useParams","getProfile","StandalonePost","Settings","Notifications","App","isAuthenticated","setIsAuthenticated","setCurrentUser","checkAuthenticated","res","parseRes","boolean","exact","path","render","props","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c5531f51.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\r\n\r\nconst Register = ({ setAuth }) => {\r\n\r\n    const [inputs, setInputs] = useState({\r\n        name: \"\",\r\n        username: \"\",\r\n        email: \"\",\r\n        password: \"\"\r\n    });\r\n\r\n    const { name, username, email, password } = inputs;\r\n\r\n    const onChange = e =>\r\n        setInputs({ ...inputs, [e.target.name]: e.target.value });\r\n\r\n    const onSubmitForm = async e => {\r\n        e.preventDefault();\r\n        try {\r\n            const body = { name, username, email, password };\r\n            // convert username and email to lowercase\r\n            body.email = body.email.toLowerCase();\r\n            body.username = body.username.toLowerCase();\r\n\r\n            const response = await fetch(\r\n                \"/auth/register\",\r\n                {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                }\r\n            );\r\n            const parseResponse = await response.json();\r\n\r\n            if (parseResponse.token) {\r\n                localStorage.setItem(\"token\", parseResponse.token);\r\n                setAuth(true);\r\n            } else {\r\n                setAuth(false);\r\n            }\r\n\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            {/* <!-- Button trigger modal --> */}\r\n            <button type=\"button\" className=\"btn btn-primary button\" data-bs-toggle=\"modal\" data-bs-target=\"#register\">\r\n                Sign up\r\n            </button>\r\n\r\n            {/* <!-- Modal --> */}\r\n            <div className=\"modal fade\" id=\"register\" tabIndex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n                <div className=\"modal-dialog\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\">Create your account</h5>\r\n                            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            <form onSubmit={onSubmitForm} className=\"signup-form\">\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"Name\"\r\n                                    name=\"name\"\r\n                                    value={name}\r\n                                    onChange={onChange}\r\n                                />\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"Username\"\r\n                                    name=\"username\"\r\n                                    value={username}\r\n                                    onChange={onChange}\r\n                                />\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    type=\"email\"\r\n                                    placeholder=\"Email\"\r\n                                    name=\"email\"\r\n                                    value={email}\r\n                                    onChange={onChange}\r\n                                />\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    name=\"password\"\r\n                                    value={password}\r\n                                    onChange={onChange}\r\n                                />\r\n                                <button className=\"btn btn-primary\"  data-bs-dismiss=\"modal\" aria-label=\"Close\">Sign up</button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Register;","import React, { Fragment, useState } from \"react\";\r\n\r\n// Login using email or username\r\nconst Login = ({ setAuth }) => {\r\n\r\n    const [inputs, setInputs] = useState({\r\n        email: \"\",\r\n        password: \"\"\r\n    });\r\n\r\n    // email const can be either an email address or username\r\n    const { email, password } = inputs;\r\n\r\n    const onChange = e =>\r\n        setInputs({ ...inputs, [e.target.name]: e.target.value });\r\n\r\n    const onSubmitForm = async e => {\r\n        e.preventDefault();\r\n        try {\r\n            const body = { email, password };\r\n            // convert email to lowercase\r\n            body.email = body.email.toLowerCase();\r\n\r\n            const response = await fetch(\r\n                \"/auth/login\",\r\n                {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                }\r\n            );\r\n\r\n            const parseResponse = await response.json();\r\n\r\n            if (parseResponse.token) {\r\n                localStorage.setItem(\"token\", parseResponse.token);\r\n                setAuth(true);\r\n            } else {\r\n                setAuth(false);\r\n            }\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            {/* <!-- Button trigger modal --> */}\r\n            <button type=\"button\" className=\"btn btn-primary button\" data-bs-toggle=\"modal\" data-bs-target=\"#login\">\r\n                Log in\r\n            </button>\r\n\r\n            {/* <!-- Modal --> */}\r\n            <div className=\"modal fade\" id=\"login\" tabIndex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n                <div className=\"modal-dialog\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\">Log in to your account</h5>\r\n                            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            <form onSubmit={onSubmitForm} className=\"signup-form\">\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"Email or Username\"\r\n                                    name=\"email\"\r\n                                    value={email}\r\n                                    onChange={onChange}\r\n                                />\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    name=\"password\"\r\n                                    value={password}\r\n                                    onChange={onChange}\r\n                                />\r\n                                <button className=\"btn btn-primary\" data-bs-dismiss=\"modal\" aria-label=\"Close\">Log in</button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Login;","import React from \"react\";\r\n\r\n// components\r\nimport Register from './Register';\r\nimport Login from './Login';\r\n\r\n//styling\r\nimport './Landing.css';\r\n\r\nfunction Landing({ setAuth }) {\r\n    return (\r\n        <div className=\"landing\">\r\n            <h1 className='heading'>Welcome to Tooter</h1>\r\n            <Login setAuth={setAuth} />\r\n            <Register setAuth={setAuth} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Landing;","import React, { useState } from 'react';\r\nimport './CreatePost.css';\r\n\r\nconst CreatePost = ({ currentUser_image, getFeedPosts }) => {\r\n    const [postText, setPostText] = useState(\"\");\r\n\r\n    const onSubmitForm = async e => {\r\n        e.preventDefault();\r\n        try {\r\n            const myHeaders = new Headers();\r\n\r\n            myHeaders.append(\"Content-Type\", \"application/json\");\r\n            myHeaders.append(\"token\", localStorage.token);\r\n\r\n            const body = { postText }\r\n            const response = await fetch(\"/dashboard/post\", {\r\n                method: \"POST\",\r\n                headers: myHeaders,\r\n                body: JSON.stringify(body)\r\n            });\r\n\r\n            await response.json();\r\n            setPostText(\"\");\r\n            getFeedPosts();\r\n\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div onSubmit={onSubmitForm} className='createPost'>\r\n            <div className=\"profile-container\">\r\n                <img className=\"profile-image\" src={currentUser_image} alt=\"alt\" />\r\n            </div>\r\n            <form className=\"post-container\">\r\n                <textarea\r\n                    type='text'\r\n                    placeholder='What do you want to toot?'\r\n                    onChange={e => { setPostText(e.target.value); }}\r\n                    value={postText}\r\n                />\r\n                <button className=\"btn btn-primary create-post-button\">Toot</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreatePost;","import React, { Fragment, useState } from 'react';\r\n\r\nconst CreateComment = ({ post, commentCount, getCommentCount }) => {\r\n\r\n    const [comment, setComment] = useState(\"\");\r\n\r\n    const onSubmitForm = async e => {\r\n        e.preventDefault();\r\n        const body = { comment };\r\n\r\n        const myHeaders = new Headers();\r\n\r\n        myHeaders.append(\"Content-Type\", \"application/json\");\r\n        myHeaders.append(\"token\", localStorage.token);\r\n\r\n        await fetch(\"/dashboard/post/\" + post.post_id + \"/comment\", {\r\n            method: \"POST\",\r\n            headers: myHeaders,\r\n            body: JSON.stringify(body)\r\n        });\r\n        setComment(\"\");\r\n        getCommentCount();\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            {/* <!-- Button trigger modal --> */}\r\n            <button type=\"button\" data-bs-toggle=\"modal\" data-bs-target={`#post_id${post.post_id}`}>\r\n                Comment\r\n            </button>\r\n            <p>{commentCount}</p>\r\n\r\n            {/* <!-- Modal --> */}\r\n            <div className=\"modal fade\" id={`post_id${post.post_id}`} tabIndex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n                <div className=\"modal-dialog\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            <div onSubmit={onSubmitForm} className='createPost'>\r\n                                <div className=\"profile-container\">\r\n                                    <img className=\"profile-image\" src={post.user_image} alt=\"alt\" />\r\n                                </div>\r\n                                <form className=\"post-container\">\r\n                                    <textarea\r\n                                        type='text'\r\n                                        placeholder='Toot your reply?'\r\n                                        onChange={e => { setComment(e.target.value); }}\r\n                                        value={comment}\r\n                                    />\r\n                                    <button className=\"btn btn-primary create-post-button\" data-bs-dismiss=\"modal\">Reply</button>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default CreateComment;","import React, { useEffect, useState } from 'react';\r\nimport './Post.css';\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\n// components\r\nimport CreateComment from './CreateComment';\r\n\r\nconst Post = ({ post, updatePosts, generatePosts }) => {\r\n\r\n    const [likeCount, setLikeCount] = useState(0);\r\n    const [commentCount, setCommentCount] = useState(0);\r\n    const [retweetCount, setRetweetCount] = useState(0);\r\n    const [retweeter, setRetweeter] = useState('');\r\n\r\n    // get number of likes on the post\r\n    const getLikeCount = async () => {\r\n        try {\r\n            const response = await fetch(\"http://localhost:5000/dashboard/post/\" + post.post_id + \"/likeCount\", {\r\n                method: \"GET\",\r\n                headers: { token: localStorage.token }\r\n            });\r\n            const parseResponse = await response.json();\r\n            setLikeCount(parseResponse.rows[0].count);\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    // get number of comments on the post\r\n    const getCommentCount = async () => {\r\n        try {\r\n            const response = await fetch(\"http://localhost:5000/dashboard/post/\" + post.post_id + \"/commentCount\", {\r\n                method: \"GET\",\r\n                headers: { token: localStorage.token }\r\n            });\r\n            const parseResponse = await response.json();\r\n            setCommentCount(parseResponse.rows[0].count);\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    // get number of retweets on the post\r\n    const getRetweetCount = async () => {\r\n        try {\r\n            const response = await fetch(\"http://localhost:5000/dashboard/post/\" + post.post_id + \"/retweetCount\", {\r\n                method: \"GET\",\r\n                headers: { token: localStorage.token }\r\n            });\r\n            const parseResponse = await response.json();\r\n            setRetweetCount(parseResponse.rows[0].count);\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    // get retweeter's user name\r\n    const getRetweetUserName = async () => {\r\n        try {\r\n            const response = await fetch(\"http://localhost:5000/dashboard/getUsername/\" + post.retweet_user_id, {\r\n                method: \"GET\",\r\n                headers: { token: localStorage.token }\r\n            });\r\n            const parseResponse = await response.json();\r\n            setRetweeter(parseResponse.rows[0].user_name);\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    // check if the comment has been liked\r\n    const checkIfPostLiked = async () => {\r\n        try {\r\n            const liked = await fetch(\"http://localhost:5000/dashboard/post/\" + post.post_id + \"/like\", {\r\n                method: \"GET\",\r\n                headers: { token: localStorage.token }\r\n            });\r\n            const parseLiked = await liked.json();\r\n\r\n            if (parseLiked.rows.length > 0) {\r\n                await unlikePost();\r\n            } else {\r\n                await likePost();\r\n            }\r\n\r\n            getLikeCount();\r\n\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    // like the comment\r\n    const likePost = async () => {\r\n        try {\r\n            await fetch(\"http://localhost:5000/dashboard/post/\" + post.post_id + \"/like\", {\r\n                method: \"POST\",\r\n                headers: { token: localStorage.token }\r\n            });\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    // unlike the comment\r\n    const unlikePost = async () => {\r\n        try {\r\n            await fetch(\"http://localhost:5000/dashboard/post/\" + post.post_id + \"/like\", {\r\n                method: \"DELETE\",\r\n                headers: { token: localStorage.token }\r\n            });\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    // check if comment has been retweeted\r\n    const checkIfPostRetweeted = async () => {\r\n        try {\r\n            const retweet = await fetch(\"http://localhost:5000/dashboard/post/\" + post.post_id + \"/retweet\", {\r\n                method: \"GET\",\r\n                headers: { token: localStorage.token }\r\n            });\r\n            const parseRetweet = await retweet.json();\r\n\r\n            if (parseRetweet.rows.length > 0) {\r\n                await unretweetPost();\r\n            } else {\r\n                await retweetPost();\r\n            }\r\n\r\n            await updatePosts(post.post_id);\r\n            await generatePosts();\r\n            getRetweetCount();\r\n\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    // retweet a post\r\n    const retweetPost = async () => {\r\n        try {\r\n            await fetch(\"http://localhost:5000/dashboard/post/\" + post.post_id + \"/retweet\", {\r\n                method: \"POST\",\r\n                headers: { token: localStorage.token }\r\n            });\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    // un-retweet a post\r\n    const unretweetPost = async () => {\r\n        try {\r\n            await fetch(\"http://localhost:5000/dashboard/post/\" + post.post_id + \"/retweet\", {\r\n                method: \"DELETE\",\r\n                headers: { token: localStorage.token }\r\n            });\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    // uses functions on mount\r\n    useEffect(() => {\r\n        getLikeCount();\r\n        getCommentCount();\r\n        getRetweetCount();\r\n        if (post.retweet_user_id) {\r\n            getRetweetUserName();\r\n        }\r\n    });\r\n\r\n    // checks if user has a profile picture\r\n    if (post.user_image == null) {\r\n        post.user_image = \"https://i.stack.imgur.com/34AD2.jpg\";\r\n    }\r\n\r\n    // convert post time to local time, slicing off the day of the week in the beginning, and the timezone at the end\r\n    post.post_time = new Date(post.post_time).toString().slice(4, 21);\r\n\r\n    return (\r\n        <div>\r\n            <div className='post'>\r\n                {post.retweet_user_id && <div className=\"activity-info\">\r\n                    <span>{retweeter} Retweeted</span>\r\n                </div>}\r\n                <div className=\"post-container1\">\r\n                    <div className=\"profile-img-container\">\r\n                        <img className=\"profile-image\" src={post.user_image} alt=\"alt\" />\r\n                    </div>\r\n                    <div className=\"post-content\">\r\n                        <div className=\"user-info\">\r\n                            <Link className=\"link\" to={post.username}>\r\n                                <span className=\"user-name\">{post.user_name}</span>\r\n                            </Link>\r\n                            {/*&nbsp; will create whitespace*/}\r\n                            <span className=\"user-tag\">&nbsp;@{post.username} . {post.post_time}</span>\r\n                        </div>\r\n                        <div className='post-body'>\r\n                            <p>{post.post_text}</p>\r\n                        </div>\r\n                        <div className='post-options'>\r\n                            <span className='comment-option'>\r\n                                <CreateComment\r\n                                    post={post}\r\n                                    commentCount={commentCount}\r\n                                    getCommentCount={getCommentCount}\r\n                                />\r\n                            </span>\r\n                            <span className='retweet-option'>\r\n                                <button onClick={checkIfPostRetweeted}>Retweet</button>\r\n                                <p>{retweetCount}</p>\r\n                            </span>\r\n                            <span className='like-option'>\r\n                                <button onClick={checkIfPostLiked}>Like</button>\r\n                                <p>{likeCount}</p>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React, { useState, useEffect } from 'react';\r\n\r\n//components\r\nimport CreatePost from './posts/CreatePost';\r\nimport Post from './posts/Post';\r\n\r\n//styling\r\nimport './Feed.css';\r\n\r\nconst Feed = ({ currentUser }) => {\r\n\r\n    const [allPosts, setAllPosts] = useState([]);\r\n\r\n    const getFeedPosts = async () => {\r\n        try {\r\n            const response = await fetch(\"/dashboard/feedPosts\", {\r\n                method: \"GET\",\r\n                headers: { token: localStorage.token }\r\n            });\r\n            const parseResponse = await response.json();\r\n            setAllPosts(parseResponse);\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    let profileImg = \"https://i.stack.imgur.com/34AD2.jpg\"\r\n\r\n    // checks if user has a profile picture\r\n    if (currentUser.user_image != null) {\r\n        profileImg = currentUser.user_image;\r\n    }\r\n\r\n\r\n    // adjust retweet count\r\n    const updatePosts = (post_id) => {\r\n        allPosts.map(post => {\r\n            if (post.post_id === post_id)\r\n                post.post_id = post_id;\r\n            return 1;\r\n        });\r\n        return 1;\r\n    }\r\n\r\n    // generate posts\r\n    const generatePosts = () => {\r\n        return (\r\n            allPosts.length !== 0 &&\r\n            allPosts.map((post, i) => {\r\n                return (<Post\r\n                    key={`${post.post_id} + ${i++}`}\r\n                    post={post}\r\n                    currentUser_image={post.user_image}\r\n                    updatePosts={updatePosts}\r\n                    generatePosts={generatePosts}\r\n                />\r\n                );\r\n            })\r\n        )\r\n    }\r\n\r\n    useEffect(() => {\r\n        getFeedPosts();\r\n    }, []);\r\n\r\n    return (\r\n        <div className='feed'>\r\n            <div className='feed-header'>\r\n                <h3>Home</h3>\r\n            </div>\r\n            <CreatePost\r\n                currentUser_image={profileImg}\r\n                getFeedPosts={getFeedPosts}\r\n            />\r\n\r\n            {generatePosts()}\r\n\r\n            {/* {allPosts.length !== 0 &&\r\n                allPosts.map((post, i) => {\r\n                    return (<Post\r\n                        key={`${post.post_id} + ${i++}`}\r\n                        post={post}\r\n                        currentUser_image={post.user_image}\r\n                        updatePosts={updatePosts}\r\n                        />\r\n                    );\r\n                })\r\n            } */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Feed;","import React from 'react';\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\nimport './Sidebar.css';\r\n\r\nconst Sidebar = ({ setAuth, username, name }) => {\r\n\r\n    let loggedIn = username ? true : false;\r\n\r\n    const logout = async () => {\r\n        localStorage.removeItem(\"token\");\r\n        setAuth(false);\r\n    }\r\n\r\n    return (\r\n        <div className='sidebar'>\r\n            <div className='container'>\r\n                <form>\r\n                    {loggedIn && <h2 className=\"sidebar-name\">{name}'s</h2>}\r\n                    <input\r\n                        className=\"search-bar\"\r\n                        type=\"text\"\r\n                        placeholder=\"Search\"\r\n                    />\r\n                    <Link className=\"link\" to=\"/home\">\r\n                        {loggedIn && <h5>Home</h5>}\r\n                        {!loggedIn && <h5>Login!</h5>}\r\n                    </Link>\r\n                    {/* {loggedIn && <Link className=\"link\" to=\"/notifications\">\r\n                        <h5>Notifications</h5>\r\n                    </Link>} */}\r\n                    {loggedIn && <Link className=\"link\" to={username}>\r\n                        <h5>Profile</h5>\r\n                    </Link>}\r\n                    {/* {loggedIn && <Link className=\"link\" to=\"/settings\">\r\n                        <h5>Settings</h5>\r\n                    </Link>} */}\r\n                    {loggedIn && <div className=\"sidebar-footer\">\r\n                        <button onClick={logout} className=\"btn btn-primary logout-button\">\r\n                            Logout\r\n                        </button>\r\n                    </div>}\r\n                </form>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Sidebar;","import React, {useEffect} from 'react';\r\n\r\n//components\r\nimport Feed from './Feed';\r\nimport Sidebar from './Sidebar';\r\n\r\n//styling\r\nimport './Home.css';\r\n\r\nconst Home = ({ setAuth, getCurrentUser, currentUser }) => {\r\n\r\n    useEffect(() => {\r\n        getCurrentUser();\r\n    }, []);\r\n\r\n    return (\r\n        <div className='home'>\r\n            <Sidebar \r\n                setAuth={setAuth}\r\n                username={currentUser.username}\r\n                name={currentUser.user_name}\r\n            />\r\n            <Feed \r\n                currentUser={currentUser}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","import React, { useEffect, useState } from 'react';\r\nimport './UserInfo.css';\r\n\r\nimport Post from '../posts/Post';\r\n\r\nconst UserInfo = ({ currentUser, profile }) => {\r\n\r\n    const [followerProfiles, setFollowerProfiles] = useState([]);\r\n    const [followingProfiles, setFollowingProfiles] = useState([]);\r\n    const [allPostsRetweets, setPostsRetweets] = useState([]);\r\n    const [followed, setFollowed] = useState(Boolean);\r\n\r\n    const getPostsRetweets = async () => {\r\n        try {\r\n            const response = await fetch(\"http://localhost:5000/dashboard/profile/\" + profile.username + \"/posts\", {\r\n                method: \"GET\",\r\n                headers: { token: localStorage.token }\r\n            });\r\n            const parseResponse = await response.json();\r\n            setPostsRetweets(parseResponse.rows);\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    if (profile) {\r\n        if (profile.user_image == null) {\r\n            profile.user_image = \"https://i.stack.imgur.com/34AD2.jpg\";\r\n        }\r\n        profile.date_joined = new Date(profile.date_joined).toString().slice(4, 15);\r\n    }\r\n\r\n    const getFollowerProfiles = async () => {\r\n        try {\r\n            const response = await fetch(\"http://localhost:5000/dashboard/profile/\" + profile.username + \"/followerProfiles\", {\r\n                method: \"GET\",\r\n                headers: { token: localStorage.token }\r\n            });\r\n            const parseResponse = await response.json();\r\n            setFollowerProfiles(parseResponse.rows)\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    const getFollowingProfiles = async () => {\r\n        try {\r\n            const response = await fetch(\"http://localhost:5000/dashboard/profile/\" + profile.username + \"/followingProfiles\", {\r\n                method: \"GET\",\r\n                headers: { token: localStorage.token }\r\n            });\r\n            const parseResponse = await response.json();\r\n            setFollowingProfiles(parseResponse.rows);\r\n\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    const checkIfFollowed = async () => {\r\n        try {\r\n            const response = await fetch(\"http://localhost:5000/dashboard/profile/\" + profile.username + \"/follow\", {\r\n                method: \"GET\",\r\n                headers: { token: localStorage.token }\r\n            });\r\n\r\n            const parseResponse = await response.json();\r\n\r\n            if (parseResponse.rows.length > 0) {\r\n                await setFollowed(true);\r\n            } else {\r\n                await setFollowed(false);\r\n            }\r\n\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    const followUnfollow = async () => {\r\n        if (followed) {\r\n            await unfollowUser();\r\n        } else {\r\n            await followUser();\r\n        }\r\n        checkIfFollowed();\r\n        getFollowerProfiles();\r\n    }\r\n\r\n    const followUser = async () => {\r\n        try {\r\n            await fetch(\"http://localhost:5000/dashboard/profile/\" + profile.username + \"/follow\", {\r\n                method: \"POST\",\r\n                headers: { token: localStorage.token }\r\n            });\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    const unfollowUser = async () => {\r\n        try {\r\n            await fetch(\"http://localhost:5000/dashboard/profile/\" + profile.username + \"/unfollow\", {\r\n                method: \"DELETE\",\r\n                headers: { token: localStorage.token }\r\n            });\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    // generate posts\r\n    const generatePosts = () => {\r\n        return (\r\n            allPostsRetweets.length !== 0 &&\r\n            allPostsRetweets.map((post, i) => {\r\n                return (<Post\r\n                    key={`${post.post_id} + ${i++}`}\r\n                    post={post}\r\n                    currentUser_image={post.user_image}\r\n                    generatePosts={generatePosts}\r\n                />\r\n                );\r\n            })\r\n        )\r\n    }\r\n\r\n    useEffect(() => {\r\n        checkIfFollowed();\r\n        getFollowerProfiles();\r\n        getFollowingProfiles();\r\n        getPostsRetweets();\r\n    }, [profile]);\r\n\r\n    return (\r\n        <div id=\"user-info\">\r\n            {profile &&\r\n                <div className=\"user-info-container\">\r\n                    <div className='feed-header'>\r\n                        <h3>{profile.user_name}</h3>\r\n                    </div>\r\n                    <img className=\"profile-img\" src={profile.user_image} alt=\"alt\"></img>\r\n                    <div className=\"user-info-container-2\">\r\n                        {currentUser.username && <div className=\"follow-row\">\r\n                            <h3 className=\"name\">{profile.user_name}</h3>\r\n                            {profile.username == currentUser.username && <button>Edit Profile</button>}\r\n                            {profile.username != currentUser.username && !followed && <button onClick={followUnfollow}>Follow</button>}\r\n                            {profile.username != currentUser.username && followed && <button onClick={followUnfollow}>Following</button>}\r\n                        </div>}\r\n                        <p className=\"user-username\">@{profile.username}</p>\r\n                        <p>Description {profile.description}</p>\r\n                        <p className=\"user-join-date\">Joined {profile.date_joined}</p>\r\n                        <p>{followingProfiles.length} <span className=\"user-followers\">Following</span>\r\n                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                            {followerProfiles.length} <span className=\"user-followers\">Followers</span>\r\n                        </p>\r\n                    </div>\r\n                </div>}\r\n            <hr />\r\n            {!profile && <h1 className=\"user-not-exist\">User does not exist</h1>}\r\n            {generatePosts()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserInfo;","import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport './Profile.css';\r\n\r\nimport Sidebar from '../Sidebar';\r\nimport UserInfo from './UserInfo';\r\n\r\nconst Profile = ({ setAuth, getCurrentUser, currentUser }) => {\r\n\r\n    const [profile, setProfile] = useState({});\r\n    const { username } = useParams();\r\n\r\n    const getProfile = async () => {\r\n        try {\r\n            const response = await fetch(\"/dashboard/profile/\" + username, {\r\n                method: \"GET\",\r\n                headers: { token: localStorage.token }\r\n            });\r\n            const parseResponse = await response.json();\r\n            setProfile(parseResponse[0]);\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getCurrentUser();\r\n        getProfile();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"profile\">\r\n            <Sidebar\r\n                setAuth={setAuth}\r\n                username={currentUser.username}\r\n                name={currentUser.user_name}\r\n            />\r\n            <UserInfo\r\n                currentUser={currentUser}\r\n                profile={profile}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React, {useState, useEffect} from 'react';\r\n\r\nconst StandalonePost = ({ setAuth, getCurrentUser, currentUser }) => {\r\n\r\n    useEffect(() => {\r\n        getCurrentUser();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <p>Post</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StandalonePost;","import React from 'react';\r\nimport './Settings.css';\r\nimport Sidebar from '../Sidebar';\r\n\r\nconst Settings = ({setAuth, currentUser}) => {\r\n    return (\r\n        <div id=\"settings\">\r\n            <Sidebar\r\n                setAuth={setAuth}\r\n                username={currentUser.username}\r\n                name={currentUser.user_name}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;","import React from 'react';\r\nimport './Notifications.css';\r\nimport Sidebar from '../Sidebar';\r\n\r\nconst Notifications = ({setAuth, currentUser}) => {\r\n    return (\r\n        <div id=\"notifications\">\r\n            <Sidebar\r\n                setAuth={setAuth}\r\n                username={currentUser.username}\r\n                name={currentUser.user_name}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Notifications;","import React, { useEffect, useState } from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect\r\n} from 'react-router-dom';\r\n\r\n// COMPONENTS\r\nimport Landing from './components/landing/Landing';\r\nimport Home from './components/dashboard/Home';\r\nimport Profile from './components/dashboard/profile/Profile';\r\nimport StandalonePost from './components/dashboard/standalone-post/StandalonePost';\r\nimport Settings from './components/dashboard/settings/Settings';\r\nimport Notifications from './components/dashboard/notifications/Notifications';\r\n\r\n//STYLING\r\nimport './App.css';\r\n\r\nfunction App() {\r\n\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [currentUser, setCurrentUser] = useState({});\r\n\r\n  const checkAuthenticated = async () => {\r\n    try {\r\n      const res = await fetch(\"/auth/verify\", {\r\n        method: \"POST\",\r\n        headers: { token: localStorage.token }\r\n      });\r\n\r\n      const parseRes = await res.json();\r\n\r\n      parseRes === true ? setIsAuthenticated(true) : setIsAuthenticated(false);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  }\r\n\r\n  const getCurrentUser = async () => {\r\n    try {\r\n      const response = await fetch(\"/dashboard/currentUser\", {\r\n        method: \"GET\",\r\n        headers: { token: localStorage.token }\r\n      });\r\n      const parseResponse = await response.json();\r\n      setCurrentUser(parseResponse[0]);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    checkAuthenticated();\r\n  }, []);\r\n\r\n  const setAuth = boolean => {\r\n    setIsAuthenticated(boolean);\r\n  }\r\n\r\n  return (\r\n    <div className='App'>\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path='/' render={props =>\r\n            !isAuthenticated\r\n              ? <Landing {...props} setAuth={setAuth} />\r\n              : <Redirect to='/home' />\r\n          }\r\n\r\n          />\r\n          <Route exact path='/home' render={props =>\r\n            isAuthenticated\r\n              ? <Home {...props} setAuth={setAuth} getCurrentUser={getCurrentUser} currentUser={currentUser} />\r\n              : <Redirect to='/' />\r\n          }\r\n          />\r\n\r\n          <Route exact path='/notifications' render={props =>\r\n            isAuthenticated\r\n              ? <Notifications {...props} setAuth={setAuth} getCurrentUser={getCurrentUser} currentUser={currentUser} />\r\n              : <Redirect to='/' />\r\n          }\r\n          />\r\n\r\n          <Route exact path='/settings' render={props =>\r\n            isAuthenticated\r\n              ? <Settings {...props} setAuth={setAuth} getCurrentUser={getCurrentUser} currentUser={currentUser} />\r\n              : <Redirect to='/' />\r\n          }\r\n          />\r\n          \r\n          <Route path='/post'>\r\n            <StandalonePost setAuth={setAuth} getCurrentUser={getCurrentUser} currentUser={currentUser} />\r\n          </Route>\r\n\r\n          <Route path='/:username'>\r\n            <Profile setAuth={setAuth} getCurrentUser={getCurrentUser} currentUser={currentUser} />\r\n          </Route>\r\n\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}